{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.11", "generated_at": "2024-04-19T13:33:00.791049Z", "invocation_id": "f2f0a20b-c4bd-43a6-b4f5-820ed25afd9d", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-19T13:33:00.655166Z", "completed_at": "2024-04-19T13:33:00.658461Z"}, {"name": "execute", "started_at": "2024-04-19T13:33:00.661083Z", "completed_at": "2024-04-19T13:33:00.661097Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017873048782348633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.my_first_dbt_model", "compiled": true, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "relation_name": "DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.my_first_dbt_model"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-19T13:33:00.647135Z", "completed_at": "2024-04-19T13:33:00.659151Z"}, {"name": "execute", "started_at": "2024-04-19T13:33:00.661743Z", "completed_at": "2024-04-19T13:33:00.661750Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01980423927307129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.book_loans", "compiled": true, "compiled_code": "\n\nWITH book_loans AS (\n    SELECT 1 AS book_id, 101 AS user_id, '2024-01-01' AS borrow_date\n    UNION ALL\n    SELECT 2, 102, '2024-01-05'\n    UNION ALL\n    SELECT 3, 103, '2024-02-02'\n    UNION ALL\n    SELECT 4, 104, '2024-02-15'\n    UNION ALL\n    SELECT 5, 105, '2024-03-01'\n),\nrecent_loans AS (\n    SELECT *\n    FROM book_loans\n    WHERE borrow_date > '2024-01-31'\n)\nSELECT *\nFROM recent_loans", "relation_name": "DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.book_loans"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-19T13:33:00.669176Z", "completed_at": "2024-04-19T13:33:00.681921Z"}, {"name": "execute", "started_at": "2024-04-19T13:33:00.683339Z", "completed_at": "2024-04-19T13:33:00.683347Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01827549934387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.my_second_dbt_model", "compiled": true, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.my_first_dbt_model\nwhere id = 1", "relation_name": "DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.my_second_dbt_model"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-19T13:33:00.672231Z", "completed_at": "2024-04-19T13:33:00.685060Z"}, {"name": "execute", "started_at": "2024-04-19T13:33:00.688069Z", "completed_at": "2024-04-19T13:33:00.688078Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02263927459716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_my_first_dbt_model_id.16e066b321", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.my_first_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-19T13:33:00.690505Z", "completed_at": "2024-04-19T13:33:00.718286Z"}, {"name": "execute", "started_at": "2024-04-19T13:33:00.719682Z", "completed_at": "2024-04-19T13:33:00.719697Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03411602973937988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.my_second_python_model", "compiled": true, "compiled_code": "from snowflake.snowpark.functions import udf\r\n\r\ndef model(dbt, session):\r\n    # Must be either table or incremental (view is not currently supported)\r\n    dbt.config(materialized = \"table\")\r\n\r\n    # User defined function\r\n    @udf\r\n    def add_one(x: int) -> int:\r\n        x = 0 if not x else x\r\n        return x + 1\r\n\r\n    # DataFrame representing an upstream model\r\n    df = dbt.ref(\"book_loans\")\r\n\r\n    # Add a new column containing the id incremented by one\r\n    df = df.withColumn(\"BOOK_ID_PLUS_ONE\", add_one(df[\"BOOK_ID\"]))\r\n\r\n    return df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"book_loans\": \"DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.book_loans\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"DBT_Julian_ist_der_Beste\"\n    schema = \"TEST_SCHEMA_3\"\n    identifier = \"my_second_python_model\"\n    \n    def __repr__(self):\n        return 'DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.my_second_python_model'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "relation_name": "DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.my_second_python_model"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-19T13:33:00.714084Z", "completed_at": "2024-04-19T13:33:00.720377Z"}, {"name": "execute", "started_at": "2024-04-19T13:33:00.723464Z", "completed_at": "2024-04-19T13:33:00.723473Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012774467468261719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.snowpark_demo", "compiled": true, "compiled_code": "def model(dbt, session):\r\n    # Must be either table or incremental (view is not currently supported)\r\n    dbt.config(materialized = \"table\")\r\n\r\n    # DataFrame representing an upstream model\r\n    df = dbt.ref(\"book_loans\")\r\n\r\n    return df\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"book_loans\": \"DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.book_loans\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"DBT_Julian_ist_der_Beste\"\n    schema = \"TEST_SCHEMA_3\"\n    identifier = \"snowpark_demo\"\n    \n    def __repr__(self):\n        return 'DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.snowpark_demo'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n\n", "relation_name": "DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.snowpark_demo"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-19T13:33:00.727385Z", "completed_at": "2024-04-19T13:33:00.743220Z"}, {"name": "execute", "started_at": "2024-04-19T13:33:00.745857Z", "completed_at": "2024-04-19T13:33:00.745871Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023320913314819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_book_loans_book_id.cd147c3a10", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect book_id\nfrom DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.book_loans\nwhere book_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-19T13:33:00.738633Z", "completed_at": "2024-04-19T13:33:00.743944Z"}, {"name": "execute", "started_at": "2024-04-19T13:33:00.746534Z", "completed_at": "2024-04-19T13:33:00.746543Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011538267135620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_book_loans_borrow_date.60f6c76397", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect borrow_date\nfrom DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.book_loans\nwhere borrow_date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-19T13:33:00.753598Z", "completed_at": "2024-04-19T13:33:00.762576Z"}, {"name": "execute", "started_at": "2024-04-19T13:33:00.764003Z", "completed_at": "2024-04-19T13:33:00.764013Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014841556549072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_book_loans_user_id.ea74709787", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.book_loans\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-19T13:33:00.758176Z", "completed_at": "2024-04-19T13:33:00.764653Z"}, {"name": "execute", "started_at": "2024-04-19T13:33:00.767808Z", "completed_at": "2024-04-19T13:33:00.767818Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01800084114074707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_book_loans_book_id.2366c367e6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    book_id as unique_field,\n    count(*) as n_records\n\nfrom DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.book_loans\nwhere book_id is not null\ngroup by book_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-19T13:33:00.771759Z", "completed_at": "2024-04-19T13:33:00.782495Z"}, {"name": "execute", "started_at": "2024-04-19T13:33:00.785136Z", "completed_at": "2024-04-19T13:33:00.785148Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018245697021484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_my_second_dbt_model_id.151b76d778", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.my_second_dbt_model\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-19T13:33:00.777990Z", "completed_at": "2024-04-19T13:33:00.783203Z"}, {"name": "execute", "started_at": "2024-04-19T13:33:00.785819Z", "completed_at": "2024-04-19T13:33:00.785828Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011407852172851562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_my_second_dbt_model_id.57a0f8c493", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom DBT_Julian_ist_der_Beste.TEST_SCHEMA_3.my_second_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 1.5825130939483643, "args": {"populate_cache": true, "favor_state": false, "profiles_dir": "/home/runner/.dbt", "project_dir": "/home/runner/work/gh-actions-blueprint/gh-actions-blueprint/dbt_project", "log_file_max_bytes": 10485760, "partial_parse_file_diff": true, "show_resource_report": false, "cache_selected_only": false, "invocation_command": "dbt docs generate", "print": true, "introspect": true, "empty_catalog": false, "partial_parse": true, "use_colors": true, "static": false, "defer": false, "log_format": "default", "log_path": "/home/runner/work/gh-actions-blueprint/gh-actions-blueprint/dbt_project/logs", "strict_mode": false, "log_level_file": "debug", "indirect_selection": "eager", "static_parser": true, "log_format_file": "debug", "printer_width": 80, "which": "generate", "quiet": false, "write_json": true, "enable_legacy_logger": false, "exclude": [], "log_level": "info", "send_anonymous_usage_stats": true, "select": [], "warn_error_options": {"include": [], "exclude": []}, "macro_debugging": false, "vars": {}, "use_colors_file": true, "compile": true, "version_check": true}}